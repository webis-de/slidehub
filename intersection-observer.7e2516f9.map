{"version":3,"sources":["js/lib/intersection-observer.js"],"names":["window","document","IntersectionObserverEntry","prototype","defineProperty","intersectionRatio","registry","THROTTLE_TIMEOUT","POLL_INTERVAL","observe","target","isTargetAlreadyObserved","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","_checkForIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","marginString","margins","split","map","margin","parts","exec","value","parseFloat","unit","_monitoringIntersections","_monitoringInterval","setInterval","_domObserver","MutationObserver","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","forEach","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","intersectionRect","_computeTargetAndRootIntersection","newEntry","now","performance","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","rect1","rect2","top","bottom","left","right","width","height","parent","getParentNode","atRoot","parentRect","parentComputedStyle","root","body","documentElement","overflow","Math","max","min","computeRectIntersection","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","indexOf","index","splice","IntersectionObserver","time","rootBounds","boundingClientRect","targetArea","intersectionArea","callback","opt_options","options","fn","timeout","timer","bind","setTimeout","rootMargin","join","addEvent","node","event","opt_useCapture","addEventListener","attachEvent","removeEvent","removeEventListener","detatchEvent","el","err","child","parentNode","host"],"mappings":"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","file":"intersection-observer.7e2516f9.map","sourceRoot":"src","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n\n(function(window, document) {\n  'use strict';\n\n  // Exits early if all IntersectionObserver and IntersectionObserverEntry\n  // features are natively supported.\n  if (\n    'IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype\n  ) {\n    // Minimal polyfill for Edge 15's lack of `isIntersecting`\n    // See: https://github.com/w3c/IntersectionObserver/issues/211\n    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n      Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {\n        get: function() {\n          return this.intersectionRatio > 0;\n        }\n      });\n    }\n    return;\n  }\n\n  /**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observering a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */\n  var registry = [];\n\n  /**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */\n  function IntersectionObserverEntry(entry) {\n    this.time = entry.time;\n    this.target = entry.target;\n    this.rootBounds = entry.rootBounds;\n    this.boundingClientRect = entry.boundingClientRect;\n    this.intersectionRect = entry.intersectionRect || getEmptyRect();\n    this.isIntersecting = !!entry.intersectionRect;\n\n    // Calculates the intersection ratio.\n    var targetRect = this.boundingClientRect;\n    var targetArea = targetRect.width * targetRect.height;\n    var intersectionRect = this.intersectionRect;\n    var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n    // Sets intersection ratio.\n    if (targetArea) {\n      this.intersectionRatio = intersectionArea / targetArea;\n    } else {\n      // If area is zero and is intersecting, sets to 1, otherwise to 0\n      this.intersectionRatio = this.isIntersecting ? 1 : 0;\n    }\n  }\n\n  /**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */\n  function IntersectionObserver(callback, opt_options) {\n    var options = opt_options || {};\n\n    if (typeof callback != 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    if (options.root && options.root.nodeType != 1) {\n      throw new Error('root must be an Element');\n    }\n\n    // Binds and throttles `this._checkForIntersections`.\n    this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this),\n      this.THROTTLE_TIMEOUT\n    );\n\n    // Private properties.\n    this._callback = callback;\n    this._observationTargets = [];\n    this._queuedEntries = [];\n    this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n    // Public properties.\n    this.thresholds = this._initThresholds(options.threshold);\n    this.root = options.root || null;\n    this.rootMargin = this._rootMarginValues\n      .map(function(margin) {\n        return margin.value + margin.unit;\n      })\n      .join(' ');\n  }\n\n  /**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */\n  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n  /**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */\n  IntersectionObserver.prototype.POLL_INTERVAL = null;\n\n  /**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */\n  IntersectionObserver.prototype.observe = function(target) {\n    var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n      return item.element == target;\n    });\n\n    if (isTargetAlreadyObserved) {\n      return;\n    }\n\n    if (!(target && target.nodeType == 1)) {\n      throw new Error('target must be an Element');\n    }\n\n    this._registerInstance();\n    this._observationTargets.push({ element: target, entry: null });\n    this._monitorIntersections();\n    this._checkForIntersections();\n  };\n\n  /**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */\n  IntersectionObserver.prototype.unobserve = function(target) {\n    this._observationTargets = this._observationTargets.filter(function(item) {\n      return item.element != target;\n    });\n    if (!this._observationTargets.length) {\n      this._unmonitorIntersections();\n      this._unregisterInstance();\n    }\n  };\n\n  /**\n   * Stops observing all target elements for intersection changes.\n   */\n  IntersectionObserver.prototype.disconnect = function() {\n    this._observationTargets = [];\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  };\n\n  /**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */\n  IntersectionObserver.prototype.takeRecords = function() {\n    var records = this._queuedEntries.slice();\n    this._queuedEntries = [];\n    return records;\n  };\n\n  /**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */\n  IntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n    var threshold = opt_threshold || [0];\n    if (!Array.isArray(threshold)) threshold = [threshold];\n\n    return threshold.sort().filter(function(t, i, a) {\n      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n        throw new Error('threshold must be a number between 0 and 1 inclusively');\n      }\n      return t !== a[i - 1];\n    });\n  };\n\n  /**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */\n  IntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n    var marginString = opt_rootMargin || '0px';\n    var margins = marginString.split(/\\s+/).map(function(margin) {\n      var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n      if (!parts) {\n        throw new Error('rootMargin must be specified in pixels or percent');\n      }\n      return { value: parseFloat(parts[1]), unit: parts[2] };\n    });\n\n    // Handles shorthand.\n    margins[1] = margins[1] || margins[0];\n    margins[2] = margins[2] || margins[0];\n    margins[3] = margins[3] || margins[1];\n\n    return margins;\n  };\n\n  /**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibilty state is visible.\n   * @private\n   */\n  IntersectionObserver.prototype._monitorIntersections = function() {\n    if (!this._monitoringIntersections) {\n      this._monitoringIntersections = true;\n\n      // If a poll interval is set, use polling instead of listening to\n      // resize and scroll events or DOM mutations.\n      if (this.POLL_INTERVAL) {\n        this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);\n      } else {\n        addEvent(window, 'resize', this._checkForIntersections, true);\n        addEvent(document, 'scroll', this._checkForIntersections, true);\n\n        if ('MutationObserver' in window) {\n          this._domObserver = new MutationObserver(this._checkForIntersections);\n          this._domObserver.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true\n          });\n        }\n      }\n    }\n  };\n\n  /**\n   * Stops polling for intersection changes.\n   * @private\n   */\n  IntersectionObserver.prototype._unmonitorIntersections = function() {\n    if (this._monitoringIntersections) {\n      this._monitoringIntersections = false;\n\n      clearInterval(this._monitoringInterval);\n      this._monitoringInterval = null;\n\n      removeEvent(window, 'resize', this._checkForIntersections, true);\n      removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this._domObserver) {\n        this._domObserver.disconnect();\n        this._domObserver = null;\n      }\n    }\n  };\n\n  /**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */\n  IntersectionObserver.prototype._checkForIntersections = function() {\n    var rootIsInDom = this._rootIsInDom();\n    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n    this._observationTargets.forEach(function(item) {\n      var target = item.element;\n      var targetRect = getBoundingClientRect(target);\n      var rootContainsTarget = this._rootContainsTarget(target);\n      var oldEntry = item.entry;\n      var intersectionRect =\n        rootIsInDom &&\n        rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n      var newEntry = (item.entry = new IntersectionObserverEntry({\n        time: now(),\n        target: target,\n        boundingClientRect: targetRect,\n        rootBounds: rootRect,\n        intersectionRect: intersectionRect\n      }));\n\n      if (!oldEntry) {\n        this._queuedEntries.push(newEntry);\n      } else if (rootIsInDom && rootContainsTarget) {\n        // If the new entry intersection ratio has crossed any of the\n        // thresholds, add a new entry.\n        if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n          this._queuedEntries.push(newEntry);\n        }\n      } else {\n        // If the root is not in the DOM or target is not contained within\n        // root but the previous entry for this target had an intersection,\n        // add a new record indicating removal.\n        if (oldEntry && oldEntry.isIntersecting) {\n          this._queuedEntries.push(newEntry);\n        }\n      }\n    }, this);\n\n    if (this._queuedEntries.length) {\n      this._callback(this.takeRecords(), this);\n    }\n  };\n\n  /**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */\n  IntersectionObserver.prototype._computeTargetAndRootIntersection = function(target, rootRect) {\n    // If the element isn't displayed, an intersection can't happen.\n    if (window.getComputedStyle(target).display == 'none') return;\n\n    var targetRect = getBoundingClientRect(target);\n    var intersectionRect = targetRect;\n    var parent = getParentNode(target);\n    var atRoot = false;\n\n    while (!atRoot) {\n      var parentRect = null;\n      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {};\n\n      // If the parent isn't displayed, an intersection can't happen.\n      if (parentComputedStyle.display == 'none') return;\n\n      if (parent == this.root || parent == document) {\n        atRoot = true;\n        parentRect = rootRect;\n      } else {\n        // If the element has a non-visible overflow, and it's not the <body>\n        // or <html> element, update the intersection rect.\n        // Note: <body> and <html> cannot be clipped to a rect that's not also\n        // the document rect, so no need to compute a new intersection.\n        if (\n          parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible'\n        ) {\n          parentRect = getBoundingClientRect(parent);\n        }\n      }\n\n      // If either of the above conditionals set a new parentRect,\n      // calculate new intersection data.\n      if (parentRect) {\n        intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n        if (!intersectionRect) break;\n      }\n      parent = getParentNode(parent);\n    }\n    return intersectionRect;\n  };\n\n  /**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {Object} The expanded root rect.\n   * @private\n   */\n  IntersectionObserver.prototype._getRootRect = function() {\n    var rootRect;\n    if (this.root) {\n      rootRect = getBoundingClientRect(this.root);\n    } else {\n      // Use <html>/<body> instead of window since scroll bars affect size.\n      var html = document.documentElement;\n      var body = document.body;\n      rootRect = {\n        top: 0,\n        left: 0,\n        right: html.clientWidth || body.clientWidth,\n        width: html.clientWidth || body.clientWidth,\n        bottom: html.clientHeight || body.clientHeight,\n        height: html.clientHeight || body.clientHeight\n      };\n    }\n    return this._expandRectByRootMargin(rootRect);\n  };\n\n  /**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {Object} rect The rect object to expand.\n   * @return {Object} The expanded rect.\n   * @private\n   */\n  IntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n    var margins = this._rootMarginValues.map(function(margin, i) {\n      return margin.unit == 'px'\n        ? margin.value\n        : margin.value * (i % 2 ? rect.width : rect.height) / 100;\n    });\n    var newRect = {\n      top: rect.top - margins[0],\n      right: rect.right + margins[1],\n      bottom: rect.bottom + margins[2],\n      left: rect.left - margins[3]\n    };\n    newRect.width = newRect.right - newRect.left;\n    newRect.height = newRect.bottom - newRect.top;\n\n    return newRect;\n  };\n\n  /**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */\n  IntersectionObserver.prototype._hasCrossedThreshold = function(oldEntry, newEntry) {\n    // To make comparing easier, an entry that has a ratio of 0\n    // but does not actually intersect is given a value of -1\n    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;\n    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1;\n\n    // Ignore unchanged ratios\n    if (oldRatio === newRatio) return;\n\n    for (var i = 0; i < this.thresholds.length; i++) {\n      var threshold = this.thresholds[i];\n\n      // Return true if an entry matches a threshold or if the new ratio\n      // and the old ratio are on the opposite sides of a threshold.\n      if (\n        threshold == oldRatio ||\n        threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio\n      ) {\n        return true;\n      }\n    }\n  };\n\n  /**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */\n  IntersectionObserver.prototype._rootIsInDom = function() {\n    return !this.root || containsDeep(document, this.root);\n  };\n\n  /**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */\n  IntersectionObserver.prototype._rootContainsTarget = function(target) {\n    return containsDeep(this.root || document, target);\n  };\n\n  /**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */\n  IntersectionObserver.prototype._registerInstance = function() {\n    if (registry.indexOf(this) < 0) {\n      registry.push(this);\n    }\n  };\n\n  /**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */\n  IntersectionObserver.prototype._unregisterInstance = function() {\n    var index = registry.indexOf(this);\n    if (index != -1) registry.splice(index, 1);\n  };\n\n  /**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */\n  function now() {\n    return window.performance && performance.now && performance.now();\n  }\n\n  /**\n   * Throttles a function and delays its executiong, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */\n  function throttle(fn, timeout) {\n    var timer = null;\n    return function() {\n      if (!timer) {\n        timer = setTimeout(function() {\n          fn();\n          timer = null;\n        }, timeout);\n      }\n    };\n  }\n\n  /**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */\n  function addEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.addEventListener == 'function') {\n      node.addEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.attachEvent == 'function') {\n      node.attachEvent('on' + event, fn);\n    }\n  }\n\n  /**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */\n  function removeEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.removeEventListener == 'function') {\n      node.removeEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.detatchEvent == 'function') {\n      node.detatchEvent('on' + event, fn);\n    }\n  }\n\n  /**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object} The intersection rect or undefined if no intersection\n   *     is found.\n   */\n  function computeRectIntersection(rect1, rect2) {\n    var top = Math.max(rect1.top, rect2.top);\n    var bottom = Math.min(rect1.bottom, rect2.bottom);\n    var left = Math.max(rect1.left, rect2.left);\n    var right = Math.min(rect1.right, rect2.right);\n    var width = right - left;\n    var height = bottom - top;\n\n    return (\n      width >= 0 &&\n      height >= 0 && {\n        top: top,\n        bottom: bottom,\n        left: left,\n        right: right,\n        width: width,\n        height: height\n      }\n    );\n  }\n\n  /**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {Object} The (possibly shimmed) rect of the element.\n   */\n  function getBoundingClientRect(el) {\n    var rect;\n\n    try {\n      rect = el.getBoundingClientRect();\n    } catch (err) {\n      // Ignore Windows 7 IE11 \"Unspecified error\"\n      // https://github.com/w3c/IntersectionObserver/pull/205\n    }\n\n    if (!rect) return getEmptyRect();\n\n    // Older IE\n    if (!(rect.width && rect.height)) {\n      rect = {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n      };\n    }\n    return rect;\n  }\n\n  /**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {Object} The empty rect.\n   */\n  function getEmptyRect() {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    };\n  }\n\n  /**\n   * Checks to see if a parent element contains a child elemnt (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */\n  function containsDeep(parent, child) {\n    var node = child;\n    while (node) {\n      if (node == parent) return true;\n\n      node = getParentNode(node);\n    }\n    return false;\n  }\n\n  /**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */\n  function getParentNode(node) {\n    var parent = node.parentNode;\n\n    if (parent && parent.nodeType == 11 && parent.host) {\n      // If the parent is a shadow root, return the host element.\n      return parent.host;\n    }\n    return parent;\n  }\n\n  // Exposes the constructors globally.\n  window.IntersectionObserver = IntersectionObserver;\n  window.IntersectionObserverEntry = IntersectionObserverEntry;\n})(window, document);\n"]}